{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","timeToRead","split","length","heading","rows","value","onChange","event","target","newText","toUpperCase","showAlert","toLowerCase","join","trim","filter","element","toFixed","Alert","alert","word","lower","charAt","slice","capitalize","msg","defaultProps","aboutText","App","setMode","setAlert","message","setTimeout","document","body","style","backgroundColor","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.05bced26.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"/\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li> */}\r\n          </ul>\r\n          <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = { \r\n  title: PropTypes.string.isRequired, \r\n  aboutText: PropTypes.string.isRequired \r\n};\r\n\r\nNavbar.defaultProps = {\r\n  title: \"TextUtils\",\r\n  aboutText: \"About\"\r\n}","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  var timeToRead = 0.008 * text.split(\" \").length;\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\", \"success\");\r\n  };\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\", \"success\");\r\n  };\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Cleared Up the text!\", \"success\");\r\n  };\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed from your text!\", \"success\");\r\n  };\r\n\r\n  const handleOnChange = (event) => {\r\n    setText(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n        <h2>{props.heading}</h2>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"textBox\"\r\n            rows=\"8\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n          ></textarea>\r\n        </div>\r\n        <button className={\"mx-1 my-1 btn btn-success\"} onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button\r\n          className={\"mx-1 my-1 btn btn-success\"}\r\n          onClick={handleLowClick}\r\n        >\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className={\"mx-1 my-1 btn btn-success\"}\r\n          onClick={handleExtraSpaces}\r\n        >\r\n          Remove Extra\r\n        </button>\r\n        <button\r\n          className={\"mx-1 my-1 btn btn-success\"}\r\n          onClick={handleClearClick}\r\n        >\r\n          Clear Text\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h2>Your Text Summary</h2>\r\n        {/* <p> {text.split(\" \").length} Words and {text.length} Characters</p> */}\r\n        <p>\r\n          {\r\n            text\r\n              .trim()\r\n              .split(\" \")\r\n              .filter(function (element) {\r\n                return element !== \"\";\r\n              }).length\r\n          }{\" \"}\r\n          Words and {text.length} Characters.\r\n        </p>\r\n        <p>\r\n          Average time the text will take to read is - {timeToRead.toFixed(3)} Minutes\r\n        </p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter something in the textbox above to preview it here!\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Alert(props) {\r\n\r\n    const capitalize = (word) => {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>\r\n          {capitalize(props.alert.type)} - {props.alert.msg}\r\n        </strong>\r\n      </div>\r\n    )\r\n  );\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\n\nfunction App() {\n\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=> {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2500);\n  }\n\n  const toggleMode = ()=> {\n    if(mode === 'light') {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = 'black';\n      document.body.style.color = 'white';\n      showAlert(\"Dark Mode has been enabled\", \"success\");\n    } else {\n      setMode(\"light\")\n      document.body.style.backgroundColor = 'white';\n      document.body.style.color = 'black';\n      showAlert(\"Light Mode has been enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n      <TextForm heading=\"Enter the text below to Analyse\" showAlert={showAlert} />\n      {/* <About /> */}\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}